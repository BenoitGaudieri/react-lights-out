{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5053b524.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props passed by Board.js:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(evt) {\n\t\t// call up to the board to flip cells around this cell\n\t\tthis.props.flipCellsAroundMe();\n\t}\n\n\trender() {\n\t\tlet classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n\t\treturn <td className={classes} onClick={this.handleClick} />;\n\t}\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLightStartsOn: 0.25\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard()\n\t\t};\n\t}\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\tcreateBoard() {\n\t\tlet board = [];\n\t\t// TODO: create array-of-arrays of true/false values\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn);\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n\t\treturn board;\n\t}\n\n\t/** handle changing a cell: update board & determine if winner */\n\tflipCellsAround(coord) {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [ y, x ] = coord.split('-').map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\t\tflipCell(y, x); //Flip initial cell\n\t\tflipCell(y, x - 1); //flip left\n\t\tflipCell(y, x + 1); //flip right\n\t\tflipCell(y - 1, x); //flip below\n\t\tflipCell(y + 1, x); //flip above\n\n\t\tlet hasWon = board.every((row) => row.every((cell) => !cell));\n\n\t\tthis.setState({ board, hasWon });\n\t}\n\n\t/** Render game board or winning message. */\n\trender() {\n\t\t// if the game is won, just show a winning msg & render nothing else\n\t\tif (this.state.hasWon) {\n\t\t\treturn (\n\t\t\t\t<div className=\"Board-title\">\n\t\t\t\t\t<div className=\"winner\">\n\t\t\t\t\t\t<span className=\"neon-orange\">YOU</span>\n\t\t\t\t\t\t<span className=\"neon-blue\">WIN!!!</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\t// make table board\n\t\tlet tblBoard = [];\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\tlet coord = `${y}-${x}`;\n\t\t\t\trow.push(\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={coord}\n\t\t\t\t\t\tisLit={this.state.board[y][x]}\n\t\t\t\t\t\tflipCellsAroundMe={() => this.flipCellsAround(coord)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\ttblBoard.push(<tr>{row}</tr>);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"Board-title\">\n\t\t\t\t\t<div className=\"neon-orange\">Lights</div>\n\t\t\t\t\t<div className=\"neon-blue\">Out</div>\n\t\t\t\t</div>\n\n\t\t\t\t<table className=\"Board\">\n\t\t\t\t\t<tbody>{tblBoard}</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}